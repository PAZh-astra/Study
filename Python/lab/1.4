//task_1_Алгоритм K-средних
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
import numpy as np
from sklearn.cluster import KMeans
from sklearn.datasets.samples_generator import make_blobs
X, y_true = make_blobs(n_samples = 500, centers = 4,
cluster_std = 0.40, random_state = 0)
plt.scatter(X[:, 0], X[:, 1], s = 50)
plt.show()
kmeans = KMeans(n_clusters = 4)
kmeans.fit(X)
y_kmeans = kmeans.predict(X)
plt.scatter(X[:, 0], X[:, 1], c = y_kmeans, s = 50, cmap = 'viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c = 'black', s = 200, alpha = 0.5);
plt.show()

//task_2_Алгоритм среднего смещения
import numpy as np
from sklearn.cluster import MeanShift
import matplotlib.pyplot as plt
from matplotlib import style
style.use("ggplot")
from sklearn.datasets.samples_generator import make_blobs
centers = [[2,2],[4,5],[3,10]]
X, _ = make_blobs(n_samples = 500, centers = centers, cluster_std = 1)
plt.scatter(X[:,0],X[:,1])
plt.show()

ms = MeanShift()
ms.fit(X)
labels = ms.labels_
cluster_centers = ms.cluster_centers_
print(cluster_centers)
n_clusters_ = len(np.unique(labels))
print("Estimated clusters:", n_clusters_)
colors = 10*['r.','g.','b.','c.','k.','y.','m.']
for i in range(len(X)): 
 plt.plot(X[i][0], X[i][1], colors[labels[i]], markersize = 10)
plt.scatter(cluster_centers[:,0],cluster_centers[:,1],
 marker = "x",color = 'k', s = 150, linewidths = 5, zorder = 10)
plt.show()
...
//task_3_Нахождение ближайших соседей
...
//task_4_Классификатор ближайших соседей
from sklearn.datasets import *
import pandas as pd
%matplotlib inline
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
import numpy as np
def Image_display(i):
 plt.imshow(digit['images'][i],cmap = 'Greys_r')
plt.show()
digit = load_digits()
digit_d = pd.DataFrame(digit['data'][0:1600])
Image_display(0)

train_x = digit['data'][:1600]
train_y = digit['target'][:1600]
KNN = KNeighborsClassifier(20)
KNN.fit(train_x,train_y)
KNeighborsClassifier(algorithm = 'auto', leaf_size = 30, metric = 'minkowski',
 metric_params = None, n_jobs = 1, n_neighbors = 20, p = 2,
weights = 'uniform')
test = np.array(digit['data'][1725])
test1 = test.reshape(1,-1)
Image_display(1725)
KNN.predict(test1)
digit['target_names']
